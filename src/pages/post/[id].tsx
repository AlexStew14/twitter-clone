import { createServerSideHelpers } from "@trpc/react-query/server";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import superjson from "superjson";

import Layout from "~/components/Layout";
import PostDetailView from "~/components/posts/PostDetailView";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";

dayjs.extend(relativeTime);

const SinglePostPage: NextPage<{ id: string }> = ({ id }) => {
  const { data: post } = api.posts.getById.useQuery({ id });

  if (!post) {
    return <div>Post not found</div>;
  }

  return (
    <>
      <Head>
        <title>{`${post.author.username} - ${post.content}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex h-12 w-full items-center gap-6 p-4">
          <Link href="/">{`<-`}</Link>
          <p className="text-xl font-bold">Tweet</p>
        </div>
        <PostDetailView {...post} />
      </Layout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  const id = context.params?.id;

  if (typeof id !== "string") {
    throw new Error("No id");
  }

  await ssg.posts.getById.prefetch({
    id,
  });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      id,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default SinglePostPage;
