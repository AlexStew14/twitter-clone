import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";

dayjs.extend(relativeTime);

import { createServerSideHelpers } from "@trpc/react-query/server";
import Image from "next/image";
import superjson from "superjson";

import { LoadingPage } from "~/components/Loading";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    username,
  });

  if (!data) {
    return <div>Not found</div>;
  }

  const { data: posts, isLoading: postsIsLoading } =
    api.posts.getByUserID.useQuery({
      userID: data.id,
    });

  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex items-center justify-center">
          <span className="text-4xl font-bold">{data.username}</span>
          <Image
            src={data.profileImageUrl}
            alt={data.username}
            className="rounded-full"
            width={64}
            height={20}
          />
        </div>
        {postsIsLoading ? (
          <LoadingPage />
        ) : (
          <div className="flex flex-col items-center justify-center">
            {!posts ? (
              <div className="flex flex-col items-center justify-center">
                <p>No posts yet</p>
              </div>
            ) : (
              <div>
                {posts.map((post) => (
                  <div
                    key={post.id}
                    className="flex items-center justify-center"
                  >
                    <span>{post.content}</span>
                    <span>{dayjs(post.createdAt).fromNow()}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") {
    throw new Error("No Slug");
  }

  const username = slug.replace("@", "");
  await ssg.profile.getUserByUsername.prefetch({
    username,
  });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ProfilePage;
