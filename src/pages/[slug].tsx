import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { type GetStaticProps, type NextPage } from "next";
import Head from "next/head";

dayjs.extend(relativeTime);

import { createServerSideHelpers } from "@trpc/react-query/server";
import Image from "next/image";
import Link from "next/link";
import superjson from "superjson";

import Feed from "~/components/Feed";
import Layout from "~/components/Layout";
import { appRouter } from "~/server/api/root";
import { prisma } from "~/server/db";
import { api } from "~/utils/api";

const ProfilePage: NextPage<{ username: string }> = ({ username }) => {
  const { data } = api.profile.getUserByUsername.useQuery({
    username,
  });

  if (!data) {
    return <div>Not found</div>;
  }

  return (
    <>
      <Head>
        <title>{data.username}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="flex h-12 w-full items-center gap-6 p-4">
          <Link href="/">{`<-`}</Link>
          {data.firstName && data.lastName && (
            <p className="text-xl font-bold">
              {data.firstName} {data.lastName}
            </p>
          )}
        </div>
        <div className="relative h-52 w-full">
          <Image src={data.profileImageUrl} alt={data.username} fill />
        </div>
        <div className="relative w-full">
          <Image
            src={data.profileImageUrl}
            alt={data.username}
            className="absolute left-4 top-[-70px] rounded-full border-4 border-slate-950 bg-slate-950"
            width={140}
            height={140}
          />
        </div>
        <div className="m-16" />
        <div className="border-b border-slate-700 p-4">
          {data.firstName && data.lastName && (
            <p className="text-xl font-bold">
              {data.firstName} {data.lastName}
            </p>
          )}
          <p className="font-light text-slate-500">{`@${data.username}`}</p>
        </div>
        <Feed userID={data.id} />
      </Layout>
    </>
  );
};

export const getStaticProps: GetStaticProps = async (context) => {
  const ssg = createServerSideHelpers({
    router: appRouter,
    ctx: { prisma, userId: null },
    transformer: superjson,
  });

  const slug = context.params?.slug;

  if (typeof slug !== "string") {
    throw new Error("No Slug");
  }

  const username = slug.replace("@", "");
  await ssg.profile.getUserByUsername.prefetch({
    username,
  });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      username,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: "blocking" };
};

export default ProfilePage;
